# -*- coding: utf-8 -*-
"""car_price_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EYfh2XWC9gFDYxSOK63Ljz0-Bh9laVAp
"""

# Commented out IPython magic to ensure Python compatibility.
#import required libraries
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

car_data = pd.read_csv('/content/CAR DETAILS.csv')

car_data.head()

car_data.info()

car_data.isnull().sum()

car_data.describe()

car_data.columns

print(car_data['fuel'].value_counts())
print(car_data['seller_type'].value_counts())
print(car_data['transmission'].value_counts())
print(car_data['owner'].value_counts())

fuel_type = car_data['fuel']
seller_type = car_data['seller_type']
transmission_type = car_data['transmission']
owner = car_data['owner']
selling_price = car_data['selling_price']

from matplotlib import style

style.use('ggplot')
fig = plt.figure(figsize=(15,5))
fig.suptitle('Visualizing categorical data columns')
plt.subplot(1,4,1)
plt.bar(fuel_type,selling_price, color='royalblue')
plt.xlabel("Fuel Type")
plt.ylabel("Selling Price")
plt.subplot(1,4,2)
plt.bar(seller_type, selling_price, color='red')
plt.xlabel("Seller Type")
plt.subplot(1,4,3)
plt.bar(transmission_type, selling_price, color='purple')
plt.xlabel('Transmission type')
plt.subplot(1,4,4)
plt.bar(owner, selling_price, color='green')
plt.xlabel('Owner')
plt.show()

petrol_data = car_data.groupby('fuel').get_group('Petrol')
petrol_data.describe()

seller_data = car_data.groupby('seller_type').get_group('Dealer')
seller_data.describe()

car_data = pd.get_dummies(car_data, columns=['fuel','seller_type', 'transmission','owner'], drop_first=True)

car_data.head()

plt.figure(figsize=(10,7))
sns.heatmap(car_data.corr(), annot=True)
plt.title('Correlation between the columns')
plt.show()

X = car_data.drop(['name','selling_price'], axis=1)
y = car_data['selling_price']

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state=42)

print("X_test shape:", X_test.shape)
print("X_train shape:", X_train.shape)
print("y_test shape: ", y_test.shape)
print("y_train shape:", y_train.shape)

from sklearn.linear_model import LinearRegression

lm = LinearRegression()

lm.fit(X_train,y_train)

print(lm.intercept_)

coeff_df = pd.DataFrame(lm.coef_,X.columns,columns=['Coefficient'])
coeff_df

predictions = lm.predict(X_test)

plt.scatter(y_test,predictions)

from sklearn import metrics

from sklearn.metrics import mean_absolute_error, mean_squared_error

import numpy as np

print('MAE:', metrics.mean_absolute_error(y_test, predictions))
print('MSE:', metrics.mean_squared_error(y_test, predictions))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))



